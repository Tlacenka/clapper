#!/bin/bash

# File: 07_root.yaml
# Brief: Test nr. 7 - Advanced HOT Resolution
#        Contains 4 HOT files and 2 environment files

# - resolution across 4 YAML files
# - resolution with more nested elements, both get_param and get_attr

parameters:

  # from env2
  ControllerCount:
    type: number

  ComputeCount:
    type: number

  # ServiceNetMap from overcloud.yaml
  ServiceNetMap:
    default:
      BlockStorageHostnameResolveNetwork: internal_api
      CephClusterNetwork: storage_mgmt
      CephPublicNetwork: storage
      CephStorageHostnameResolveNetwork: storage
      CinderApiNetwork: internal_api
      CinderIscsiNetwork: storage
      ComputeHostnameResolveNetwork: internal_api
      ControllerHostnameResolveNetwork: internal_api
      GlanceApiNetwork: storage
      GlanceRegistryNetwork: internal_api
      HeatApiNetwork: internal_api
      KeystonePublicApiNetwork: internal_api
      NeutronApiNetwork: internal_api
      NeutronTenantNetwork: tenant
      NovaApiNetwork: internal_api
      NovaMetadataNetwork: internal_api
      NovaVncProxyNetwork: internal_api
      ObjectStorageHostnameResolveNetwork: internal_api
      SwiftMgmtNetwork: storage_mgmt
      SwiftProxyNetwork: storage
    type: json

  # Used in controller in get_attr
  MapNames:
    type: json
    default:
      NetMap: net_ip_map
      ServiceNetMap: service_net_map

resources:

  # Usage of RG
  Controller:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: ControllerCount}
      resource_def:
        type: OS::MyTripleO::Controller
        properties:
          MapNames: {get_param: MapNames}
          ServiceMap: {get_param: ServiceNetMap}


  # Usage of ASG
  Compute:
    type: OS::Heat::AutoScalingGroup
    depends_on: Controller
    properties:
      count: {get_param: ComputeCount}
      resource:
        type: OS::TripleO::MyCompute
        properties:
          # resolution with two nested get_ functions
          GlanceHost: {get_attr: [Controller, net_ip_map, {get_param: [{get_attr: [Controller, service_map_name]}, GlanceApiNetwork]}]}

          KeystonePublicApiVirtualIP: {get_attr: [Controller, net_ip_map, {get_param: [ServiceNetMap, KeystonePublicApiNetwork]}]}
          NovaApiHost: {get_attr: [Controller, net_ip_map, {get_param: [ServiceNetMap, NovaApiNetwork]}]}
          NovaPublicIP: {get_attr: [Controller, net_ip_map, external]}
          NetIpMap: {get_attr: [Controller, net_ip_map]}

  # resource without YAML file
  EndpointMap:
    type: OS::TripleO::EndpointMap
    properties:
      # resolution in RG using attributes keyword
      public_virtual_ip: {get_attr: [Controller, attributes, public_virtual_ip]}

      # resolution in ASG using outputs keyword
      nova_public_ip: {get_attr: [Compute, outputs, nova_public_ip]}

      # resolution in ASG using resource.<alnum string>.<name>
      management_subnet: {get_attr: [Compute, resource.randomstring123.nova_info, port]}

      # ERROR: trying to resolve nonexistent value in a structure
      nonexistent_structure: {get_attr: [Controller, public_virtual_ip, no_other_structure]}

      # ERROR: trying to get a nonexistent resource from Compute
      compute_resource: {get_attr: [Controller, resource.nonexistent_resource]}

outputs:
  nova_server:
    # resolution using resource.<name>
    value: {get_attr: [Compute, resource.NovaServer]}

  net_ip_map:
    # resolution in RG using resource.<number>.<name>
    value: {get_attr: [Controller, resource.0.net_ip_map]}

  untrackable_value:
    # if get_attr refers to resource without available file, it is ok by default
    value: {get_attr: [EndpointMap, some_output]}

  compute_outputs:
    # resolution in ASG using outputs_list keyword
    value: {get_attr: [Compute, outputs_list]}

  wrong_grouptype:
    # ERROR: using attributes in ASG
    value: {get_attr: [Compute, attributes]}

