#!/bin/bash

# File: 07_root.yaml
# Brief: Test nr. 7 - Advanced HOT Resolution
#        Contains 5 HOT files and 2 environment files

# TODO: resolution across at least 3 YAML files (get_param > peroperty value is get_attr)
#       RG and ASG stuff, getting resource via all sorts of keywords
#       

parameters:

  # from env2
  ControllerCount:
    type: number

  ComputeCount:
    type: number

  # ServiceNetMap from overcloud.yaml
  ServiceNetMap:
    default:
      BlockStorageHostnameResolveNetwork: internal_api
      CephClusterNetwork: storage_mgmt
      CephPublicNetwork: storage
      CephStorageHostnameResolveNetwork: storage
      CinderApiNetwork: internal_api
      CinderIscsiNetwork: storage
      ComputeHostnameResolveNetwork: internal_api
      ControllerHostnameResolveNetwork: internal_api
      GlanceApiNetwork: storage
      GlanceRegistryNetwork: internal_api
      HeatApiNetwork: internal_api
      KeystonePublicApiNetwork: internal_api
      NeutronApiNetwork: internal_api
      NeutronTenantNetwork: tenant
      NovaApiNetwork: internal_api
      NovaMetadataNetwork: internal_api
      NovaVncProxyNetwork: internal_api
      ObjectStorageHostnameResolveNetwork: internal_api
      SwiftMgmtNetwork: storage_mgmt
      SwiftProxyNetwork: storage
      
      
    type: json

  # Used in controller in get_attr
  MapNames:
    type: json
    default:
      NetMap: net_ip_map
      ServiceNetMap: service_net_map

resources:

  # Usage of RG
  Controller:
    type: OS::Heat::ResourceGroup
    properties:
    
      count: {get_param: ControllerCount}
      resource_def:
        type: OS::MyTripleO::Controller
        properties:
          MapNames: {get_param: MapNames}
          ServiceMap: {get_param: ServiceNetMap}
          

  # Usage of ASG
  Compute:
    type: OS::Heat::AutoScalingGroup
    depends_on: Controller
    properties:
      count: {get_param: ComputeCount}
      resource:
        type: OS::TripleO::MyCompute
        properties:
          #Flavor: {get_param: OvercloudComputeFlavor}
          GlanceHost: {get_attr: [Controller, net_ip_map, {get_param: [ServiceNetMap, GlanceApiNetwork]}]}
          #Image: {get_param: NovaImage}
          KeystonePublicApiVirtualIP: {get_attr: [Controller, net_ip_map, {get_param: [ServiceNetMap, KeystonePublicApiNetwork]}]}
          NovaApiHost: {get_attr: [Controller, net_ip_map, {get_param: [ServiceNetMap, NovaApiNetwork]}]}
          NovaPublicIP: {get_attr: [Controller, net_ip_map, external]}
          NetIpMap: {get_attr: [Controller, net_ip_map]}

  
