#!/bin/bash

# File: 06_root.yaml
# Brief: Test nr. 6 - Basic HOT Resolution
#        Contains 2 HOT files and 1 environment file
#        Includes all possible types of errors (see enum.py ErrorTypes)

parameters:
  # Values added via environment
  ControllerPassword:
    description: Controller password

  # Value determined by resource/default
  ControllerHostnameFormat:
    type: string
    description: Format for Controller node hostnames
    default: '%stackname%-controller-%index%'
  Image:
    description: Glance image
    default: overcloud-full
    constraints:
      - custom_constraint: glance.image
  KeyName:
    description: Key name
    default: guest-key

  # Example of structured parameter value
  ServiceNetMap:
    description: Mapping of service_name -> network name.
    default:
      ControllerMgmtNetwork: storage_mgmt
      ControllerProxyNetwork: storage
      ControllerHostnameResolveNetwork: internal_api
    type: json
  
  # WARNING: Unused parameter
  RandomParameter:
    description: Unused parameter

  # Value added via environment parameter_defaults
  Hostname:
    description: hostname


resources:
  Controller:
    type: OS::Heat::ResourceGroup
    properties:
      # ERROR: Basic non-existent parameter resolution
      count: {get_param: NonExistingParameter}

      resource_def:
        type: OS::TripleO::Controller
        properties:
          # Properties with matching parameters
          ControllerPassword: {get_param: ControllerPassword}
          Image: {get_param: Image}
          KeyName: {get_param: KeyName}
          ServiceNetMap: {get_param: ServiceNetMap}

          Hostname:
            str_replace:
              template: {get_param: ControllerHostnameFormat}
              params:
              #  Pseudo-parameter usage
                '%stackname%': {get_param: 'OS::stack_name'}

          # ERROR: Property without matching parameter
          ForeverAloneProperty: random-value

outputs:
  controller_network:
    value:
      # Checking valid get_attr resolution
      IPv4: {get_attr: [Controller, ip_address, IPv4, 1]}

      # ERROR: Get_attr resolution with non-existent index
      IPv6: {get_attr: [Controller, ip_address, IPv6, 1]}
  controller:
    value:
      # Valid get_attr resolution
      handler: {get_attr: [Controller, server_resource]}

      # ERROR: invalid get_resource resolution
      invalid_handler: {get_resource: NonExistingResource}
